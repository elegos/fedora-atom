--- a/src/ui/gfx/linux/client_native_pixmap_dmabuf.cc
+++ b/src/ui/gfx/linux/client_native_pixmap_dmabuf.cc
@@ -7,36 +7,33 @@
 #include <fcntl.h>
 #include <linux/version.h>
 #include <stddef.h>
+#include <sys/ioctl.h>
 #include <sys/mman.h>
 #include <xf86drm.h>
 
-#include "base/debug/crash_logging.h"
 #include "base/memory/ptr_util.h"
+#include "base/posix/eintr_wrapper.h"
 #include "base/process/memory.h"
-#include "base/process/process_metrics.h"
 #include "base/strings/stringprintf.h"
 #include "base/trace_event/trace_event.h"
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 6, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 11, 0)
+#include <linux/dma-buf.h>
+#else
 #include <linux/types.h>
 
-struct local_dma_buf_sync {
+struct dma_buf_sync {
   __u64 flags;
 };
 
-#define LOCAL_DMA_BUF_SYNC_READ (1 << 0)
-#define LOCAL_DMA_BUF_SYNC_WRITE (2 << 0)
-#define LOCAL_DMA_BUF_SYNC_RW \
-  (LOCAL_DMA_BUF_SYNC_READ | LOCAL_DMA_BUF_SYNC_WRITE)
-#define LOCAL_DMA_BUF_SYNC_START (0 << 2)
-#define LOCAL_DMA_BUF_SYNC_END (1 << 2)
+#define DMA_BUF_SYNC_READ (1 << 0)
+#define DMA_BUF_SYNC_WRITE (2 << 0)
+#define DMA_BUF_SYNC_RW (DMA_BUF_SYNC_READ | DMA_BUF_SYNC_WRITE)
+#define DMA_BUF_SYNC_START (0 << 2)
+#define DMA_BUF_SYNC_END (1 << 2)
 
-#define LOCAL_DMA_BUF_BASE 'b'
-#define LOCAL_DMA_BUF_IOCTL_SYNC \
-  _IOW(LOCAL_DMA_BUF_BASE, 0, struct local_dma_buf_sync)
-
-#else
-#include <linux/dma-buf.h>
+#define DMA_BUF_BASE 'b'
+#define DMA_BUF_IOCTL_SYNC _IOW(DMA_BUF_BASE, 0, struct dma_buf_sync)
 #endif
 
 namespace gfx {
@@ -44,25 +41,19 @@ namespace gfx {
 namespace {
 
 void PrimeSyncStart(int dmabuf_fd) {
-  struct local_dma_buf_sync sync_start = {0};
+  struct dma_buf_sync sync_start = {0};
 
-  sync_start.flags = LOCAL_DMA_BUF_SYNC_START | LOCAL_DMA_BUF_SYNC_RW;
-#if DCHECK_IS_ON()
-  int rv =
-#endif
-      drmIoctl(dmabuf_fd, LOCAL_DMA_BUF_IOCTL_SYNC, &sync_start);
-  DPLOG_IF(ERROR, rv) << "Failed DMA_BUF_SYNC_START";
+  sync_start.flags = DMA_BUF_SYNC_START | DMA_BUF_SYNC_RW;
+  int rv = HANDLE_EINTR(ioctl(dmabuf_fd, DMA_BUF_IOCTL_SYNC, &sync_start));
+  PLOG_IF(ERROR, rv) << "Failed DMA_BUF_SYNC_START";
 }
 
 void PrimeSyncEnd(int dmabuf_fd) {
-  struct local_dma_buf_sync sync_end = {0};
+  struct dma_buf_sync sync_end = {0};
 
-  sync_end.flags = LOCAL_DMA_BUF_SYNC_END | LOCAL_DMA_BUF_SYNC_RW;
-#if DCHECK_IS_ON()
-  int rv =
-#endif
-      drmIoctl(dmabuf_fd, LOCAL_DMA_BUF_IOCTL_SYNC, &sync_end);
-  DPLOG_IF(ERROR, rv) << "Failed DMA_BUF_SYNC_END";
+  sync_end.flags = DMA_BUF_SYNC_END | DMA_BUF_SYNC_RW;
+  int rv = HANDLE_EINTR(ioctl(dmabuf_fd, DMA_BUF_IOCTL_SYNC, &sync_end));
+  PLOG_IF(ERROR, rv) << "Failed DMA_BUF_SYNC_END";
 }
 
 }  // namespace
@@ -94,28 +85,23 @@ ClientNativePixmapDmaBuf::ClientNativePixmapDmaBuf(
     if (mmap_error == ENOMEM)
       base::TerminateBecauseOutOfMemory(map_size);
 
-    // TODO(dcastagna): Remove the following diagnostic information and the
-    // associated crash keys once crbug.com/629521 is fixed.
-    bool fd_valid = fcntl(dmabuf_fd_.get(), F_GETFD) != -1 ||
-                    logging::GetLastSystemErrorCode() != EBADF;
-    std::string mmap_params = base::StringPrintf(
-        "(addr=nullptr, length=%zu, prot=(PROT_READ | PROT_WRITE), "
-        "flags=MAP_SHARED, fd=%d[valid=%d], offset=0)",
-        map_size, dmabuf_fd_.get(), fd_valid);
-    std::string errno_str = logging::SystemErrorCodeToString(mmap_error);
-    std::unique_ptr<base::ProcessMetrics> process_metrics(
-        base::ProcessMetrics::CreateCurrentProcessMetrics());
-    std::string number_of_fds =
-        base::StringPrintf("%d", process_metrics->GetOpenFdCount());
-    base::debug::ScopedCrashKey params_crash_key("mmap_params", mmap_params);
-    base::debug::ScopedCrashKey size_crash_key("buffer_size", size.ToString());
-    base::debug::ScopedCrashKey errno_crash_key("errno", errno_str);
-    base::debug::ScopedCrashKey number_of_fds_crash_key("number_of_fds",
-                                                        number_of_fds);
-    LOG(ERROR) << "Failed to mmap dmabuf; mmap_params: " << mmap_params
-               << ", buffer_size: (" << size.ToString()
-               << "),  errno: " << errno_str
-               << " , number_of_fds: " << number_of_fds;
+      bool fd_valid = fcntl(dmabuf_fd_.get(), F_GETFD) != -1 ||
+                      logging::GetLastSystemErrorCode() != EBADF;
+      std::string mmap_params = base::StringPrintf(
+          "(addr=nullptr, length=%zu, prot=(PROT_READ | PROT_WRITE), "
+          "flags=MAP_SHARED, fd=%d[valid=%d], offset=0)",
+          map_size, dmabuf_fd_.get(), fd_valid);
+      std::string errno_str = logging::SystemErrorCodeToString(mmap_error);
+      LOG(ERROR) << "Failed to mmap dmabuf; mmap_params: " << mmap_params
+                 << ", buffer_size: (" << size.ToString()
+                 << "),  errno: " << errno_str;
+      LOG(ERROR) << "NativePixmapHandle:";
+      LOG(ERROR) << "Number of fds: " << handle.fds.size();
+      LOG(ERROR) << "Number of planes: " << handle.planes.size();
+      for (const auto& plane : handle.planes) {
+        LOG(ERROR) << "stride  " << plane.stride << " offset " << plane.offset
+                   << " size " << plane.size;
+      }
     CHECK(false) << "Failed to mmap dmabuf.";
   }
 }
