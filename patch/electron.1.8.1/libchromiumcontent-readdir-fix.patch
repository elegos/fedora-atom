--- a/src/base/files/file_enumerator_posix.cc
+++ b/src/base/files/file_enumerator_posix.cc
@@ -131,12 +131,13 @@ bool FileEnumerator::ReadDirectory(std::vector<FileInfo>* entries,
          additional space for pathname may be needed
 #endif
 
-  struct dirent dent_buf;
-  struct dirent* dent;
-  while (readdir_r(dir, &dent_buf, &dent) == 0 && dent) {
+  // In all implementations of the C library that Chromium can run with,
+  // concurrent calls to readdir that specify different directory streams are
+  // thread-safe. This is the case here, since the directory stream is scoped to
+  // the current function. See https://codereview.chromium.org/2411833004/#msg3
+  for (struct dirent* dent = readdir(dir); dent; dent = readdir(dir)) {
     FileInfo info;
     info.filename_ = FilePath(dent->d_name);
-
     FilePath full_name = source.Append(dent->d_name);
     int ret;
     if (show_links)
--- a/src/net/disk_cache/simple/simple_index_file_posix.cc
+++ b/src/net/disk_cache/simple/simple_index_file_posix.cc
@@ -35,11 +35,13 @@ bool SimpleIndexFile::TraverseCacheDirectory(
     PLOG(ERROR) << "opendir " << cache_path.value();
     return false;
   }
-  dirent entry, *result;
-  while (readdir_r(dir.get(), &entry, &result) == 0) {
-    if (!result)
-      return true;  // The traversal completed successfully.
-    const std::string file_name(result->d_name);
+  // In all implementations of the C library that Chromium can run with,
+  // concurrent calls to readdir that specify different directory streams are
+  // thread-safe. This is the case here, since the directory stream is scoped to
+  // the current function. See https://codereview.chromium.org/2411833004/#msg3
+  errno = 0;
+  for (dirent* entry = readdir(dir.get()); entry; entry = readdir(dir.get())) {
+    const std::string file_name(entry->d_name);
     if (file_name == "." || file_name == "..")
       continue;
     const base::FilePath file_path = cache_path.Append(
@@ -53,7 +55,9 @@ bool SimpleIndexFile::TraverseCacheDirectory(
     entry_file_callback.Run(file_path, file_info.last_accessed,
                             file_info.last_modified, file_info.size);
   }
-  PLOG(ERROR) << "readdir_r " << cache_path.value();
+  if (!errno)
+    return true;  // The traversal completed successfully.
+  PLOG(ERROR) << "readdir " << cache_path.value();
   return false;
 }
 

 

--- a/src/sandbox/linux/services/proc_util.cc
+++ b/src/sandbox/linux/services/proc_util.cc
@@ -51,19 +51,26 @@ int ProcUtil::CountOpenFds(int proc_fd) {
   CHECK(dir);
 
   int count = 0;
-  struct dirent e;
   struct dirent* de;
+#if defined(OS_NACL_NONSFI)
+  // NaCl has not implemented readdir.
+  struct dirent e;
   while (!readdir_r(dir.get(), &e, &de) && de) {
-    if (strcmp(e.d_name, ".") == 0 || strcmp(e.d_name, "..") == 0) {
+#else
+  // In all implementations of the C library that Chromium can run with,
+  // concurrent calls to readdir that specify different directory streams are
+  // thread-safe. This is the case here, since the directory stream is scoped to
+  // the current function. See https://codereview.chromium.org/2411833004/#msg3
+  for (de = readdir(dir.get()); de; de = readdir(dir.get())) {
+#endif
+    if (strcmp(de->d_name, ".") == 0 || strcmp(de->d_name, "..") == 0) {
       continue;
     }
-
     int fd_num;
-    CHECK(base::StringToInt(e.d_name, &fd_num));
+    CHECK(base::StringToInt(de->d_name, &fd_num));
     if (fd_num == proc_fd || fd_num == proc_self_fd) {
       continue;
     }
-
     ++count;
   }
   return count;
@@ -81,22 +88,31 @@ bool ProcUtil::HasOpenDirectory(int proc_fd) {
   ScopedDIR dir(fdopendir(proc_self_fd));
   CHECK(dir);
 
-  struct dirent e;
   struct dirent* de;
+#if defined(OS_NACL_NONSFI)
+  // NaCl has not implemented readdir.
+  struct dirent e;
   while (!readdir_r(dir.get(), &e, &de) && de) {
-    if (strcmp(e.d_name, ".") == 0 || strcmp(e.d_name, "..") == 0) {
+#else
+  // In all implementations of the C library that Chromium can run with,
+  // concurrent calls to readdir that specify different directory streams are
+  // thread-safe. This is the case here, since the directory stream is scoped to
+  // the current function. See https://codereview.chromium.org/2411833004/#msg3
+  for (de = readdir(dir.get()); de; de = readdir(dir.get())) {
+#endif
+    if (strcmp(de->d_name, ".") == 0 || strcmp(de->d_name, "..") == 0) {
       continue;
     }
 
     int fd_num;
-    CHECK(base::StringToInt(e.d_name, &fd_num));
+    CHECK(base::StringToInt(de->d_name, &fd_num));
     if (fd_num == proc_fd || fd_num == proc_self_fd) {
       continue;
     }
 
     struct stat s;
     // It's OK to use proc_self_fd here, fstatat won't modify it.
-    CHECK(fstatat(proc_self_fd, e.d_name, &s, 0) == 0);
+    CHECK(fstatat(proc_self_fd, de->d_name, &s, 0) == 0);
     if (S_ISDIR(s.st_mode)) {
       return true;
     }
